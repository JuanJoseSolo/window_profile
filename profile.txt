You will be able to add the new information about your own w10 profile configuration.

Clear-Host #clear the console every time when the script is called.

#--------- MAIN FUNCTION <prompt> -----------#
function prompt {
	<#
	This function provides a new visualization of the PowerShell interface.
	#>
	$Host.UI.RawUI.WindowTitle = (Get-Location).Path
	Set-PSReadLineOption -Colors @{ Command = 'green' }
	$currentDir = (Convert-Path .)

	if ($currentDir.Contains($HOME)) 
	{
		$currentDir = $currentDir.Replace($HOME, "~ ")
	}
	if (Test-Path .git) {
		Write-Host ("" + $currentDir + "\\") -NoNewLine `
		-ForegroundColor 13
		Write-BranchName
		Write-Host ("-->") -NoNewLine `
		-ForegroundColor 10
			return " "
    }
	else
	{
		Write-Host ("" + $currentDir+"\\") -NoNewLine `
		-ForegroundColor 13
		Write-BranchName
		Write-Host ("-->") -NoNewLine `
		-ForegroundColor 10
			return " "
	}	    
}
#-------- GIT FUNCTIONS --------#
function Write-BranchName () {
	$marks = "<{}>";
    try {
        $branch = git rev-parse --abbrev-ref HEAD
		if($null -eq $branch){$marks = ""}
        if ($branch -eq "HEAD") 
		{
            # we're probably in detached HEAD state, so print the SHA
            $branch = git rev-parse --short HEAD
            Write-Host $marks.Replace("{}",$branch) -ForegroundColor "red" -NoNewLine `
        }
        else 
		{
            # we're on an actual branch, so print it
			if(git status --porcelain | where {$_ -match '^\?\?' })
			{
				# Untracked files exist
				Write-Host $marks.Replace("{}","**$branch") -ForegroundColor "blue" -NoNewLine `
			}
			elseif(git status --porcelain | where {$_ -notmatch '^\?\?'})
			{
				# uncommitted changes
				Write-Host $marks.Replace("{}","++$branch") -ForegroundColor "blue" -NoNewLine `
			}
			else
			{
				# tree is clean
				Write-Host $marks.Replace("{}",$branch) -ForegroundColor "blue" -NoNewLine `
			}
        }
    } 
	catch 
	{
        # we'll end up here if we're in a newly initiated git repo
        Write-Host "<no branches yet>" -ForegroundColor "yellow" -NoNewLine `
    }
}
function mbr{
	$br_name = git rev-parse --abbrev-ref HEAD
	return $br_name
}
function bra {
	$all_branches = git branch -a
	$idx = 0 
	$branches_name = @()
	foreach($br in $all_branches)
	{
		Write-Host $idx ':' $br -ForegroundColor "green" 
		$branches_name += $br
		$idx = $idx + 1
	}
	set-bra($branches_name)
}
function set-bra($branches) {
	
	$idx = read-host "select branch"
	if($idx)
	{
		if($branches[$idx].Contains("*"))
		{
			$branch = $branches[$idx].replace("* ","")
		}else
		{
			$branch = $branches[$idx].replace("remotes/origin/","")
		}
		Set-Clipboard $branch.Trim()
	}
}

function repo($repo) {
	try {
		$repo=$repo.ToUpper()  
		$None=$false
	}
	catch {
		echo "Which repo???"
		$None=$true
	}
	if(-not $None){
	    if($repo.Contains("G80"))
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.GM.G80.CVR.git'
	    }
	    elseif($repo.Contains("G70")) 
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.GM.G70.CVR.git'
	    }
	    elseif($repo.Contains("FC1")) 
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.FORD.FC1.REGR_TEST.git'
	    }
	    elseif($repo.Contains("FB0"))
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.FORD.FB0.REGR_TEST.git'
	    }
	    elseif ($repo.Contains("FB1")) {
	        return 'https://gitlab-ec-na.aws1583.vitesco.io/ec/se/aet/tas/ford/fofb0_ta_suite.git'
	    }
		elseif($repo.Contains("E42A")){
			return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.GM.G55.FAST.git'
		}
	    else{echo "Repository don't found !!!!!!!!!"}
	}
}

function ignore{
	$ignore_list = @("work/ta/cnf/cnf_prj/devices_cnf/cnf_cal_dev.xml","work/ta/cnf/cnf_prj/devices_cnf/cnf_deb_dev.xml","work/ta/cnf/cnf_prj/devices_cnf/cnf_fiu_dev.xml","work/ta/cnf/cnf_prj/devices_cnf/cnf_hil_dev.xml","work/ta/cnf/cnf_prj/testenv_cnf/cnf_testpath.py","work/ta/cnf/cnf_prj/testenv_cnf/cnf_uut_info.xml")
	foreach($file in $ignore_list){
		echo "remove $file"
		git checkout $file
	}
	del-pyc
}

function git-push($c,$add){
	ignore
	git fetch
	git pull
	if($null -ne $c){
    	if($null -ne $add){
    	    git add $add
    	}
    	else{
    	    git add .
    	}
    git commit -am $c
    echo "committing -> '$c'"
    git push origin (mbr)
	}
	else {
		echo "push command needs to have a commit!!!"
	}
}

#------- Helpers ------#

function del-pyc {
	$command = "del *.pyc /s"
	Start-Process -NoNewWindow -FilePath "cmd.exe" -ArgumentList "/C", $command 2> $null
	clear
}

function ta($release){
	cd d:/p_ta3/
	$location=whereis -item $release -verbose $false
	cd $location
}

function mklink ($target, $link){
	New-Item -Force -Path $link -ItemType SymbolicLink -Value $target
}
function b($n){

	$back_patern = '../'
	$multiplier = $n
	# Empty string to store the result.
	$total_back = ''

	if($null -eq $n){
		Set-Location $back_patern
	}
	else{
		# Repeating the string.
		for ($i = 1; $i -le $multiplier; $i++) {
		    $total_back += $back_patern
		}
		Set-Location $total_back
	}
}
function ll {
	Get-ChildItem -Force | Sort-Object Extension
}
function note ($file){
	C:\LegacyApp\Notepad++\notepad++.exe $file
}
function re {
	powershell.exe
}
function py($version, $window){
	if($null -eq $window){
	    if($null -eq $version -or '2' -eq $version){
	    	powershell "C:\LegacyApp\Python27_x64\py2.exe"
	    }
	    elseif('3' -eq $version){
	    	powershell "C:\LegacyApp\Python36\python3.exe"
	    }
	    elseif('39' -eq $version){
	    	powershell "C:\LegacyApp\Python39\py3.exe"
	    }
	}else{
		if($null -eq $version -or '2' -eq $version){
	    	start "C:\LegacyApp\Python27_x64\py2.exe"
	    }
	    elseif('3' -eq $version){
	    	start "C:\LegacyApp\Python36\python3.exe"
	    }
	    elseif('39' -eq $version){
	    	start "C:\LegacyApp\Python39\py3.exe"
	    }
	}
}
function eclipse ($file){
	if($null -eq $file){
		start "C:\LegacyApp\Eclipse_Contest\eclipse.exe"
	}
	else{
		start "C:\LegacyApp\Eclipse_Contest\eclipse.exe" $file
	}
}
function delete ($item){
rm -Force -Recurse $item
}
function vi ($file){
	if($file.Contains('.\')){$file=$file.replace('.\','')}
	$temp_path = pwd
	cd "C:\Program Files\Git\usr\bin\" 
	.\vim.exe "$temp_path\$file"
	cd $temp_path.path
}
#####################################################
#get the parameters by console line
#####################################################
function whereis($item, $path, $verbose = $true){
#others files
	if($null -ne $item -And $null -eq $path -And $verbose -eq $true)
	{
		Write-Output "
		------------- Searching for < $item > -------------
		----- you can stop the search using 'ctr+c' -----
	searching...
	"
		$path = Get-ChildItem -Filter $item -Recurse 2> $null
	}
	elseif($null -ne $item -And $null -ne $path)
	{
		Write-Output "
		------------- Searching for < $item > --------------
		----- you can stop the search using 'ctr+c' ------
	searching...
	"
		$path = Get-ChildItem -Path $path -Filter $item -Recurse 2> $null
	}
	elseif($null -ne $item -And $null -eq $path -And $verbose -eq $false)
	{
		$path = Get-ChildItem -Filter $item -Recurse 2> $null
	}	
	else
	{
		Write-Host '
		'
		help $MyInvocation.MyCommand.Name
		write-host "Parameters:
		-item:: the file that you want to search
		-path:: the location where you want to search
		-verbose:: it shows the information
		"
	}
	if($verbose -eq $false){
		return $path.FullName
	}
	if($verbose -And $path)
	{
		$allpaths = $path.FullName
		Set-Clipboard $allpaths
		echo "Found at:"
		foreach($found in $allpaths)
		{
			echo "  $found"
		}
		echo "
		"
	}
	elseif ($path) 
	{
		Set-Clipboard $path.FullName
		echo 'All was copied on clipboard !!!
		'
	}
	else{echo " $item NOT FOUND !!!!!
	"}
}


<#
<#
Module description: ----
#>

Clear-Host #clear the console every time when the script is called.

#------ Importing PS1 Modules ------#
$exe_path = Get-Location
Set-Location $HOME
$root_path = Get-Location
$modules_path = $root_path.Path + '\Documents\WindowsPowerShell\lib\{0}.psm1'
Import-Module -Name ($modules_path -f "GitComCom") -DisableNameChecking
Import-Module -Name ($modules_path -f "Helpers") -DisableNameChecking
Set-Location $exe_path

#--------- MAIN FUNCTION <prompt> -----------#
function prompt {
	<#
		This function provides a new visualization of the PowerShell interface.
	#>
	$Host.UI.RawUI.WindowTitle = (Get-Location).Path
	Set-PSReadLineOption -Colors @{ Command = 'green' }
	$currentDir = (Convert-Path .)

	if ($currentDir.Contains($HOME)) {
		$currentDir = $currentDir.Replace($HOME, "~ ")
	}
    if($currentDir.Contains("work\ta") -or $currentDir.Contains(("work"))){
        $ta_dir = $currentDir
        $ta = $ta_dir.ToString()
        $ta_split = $ta.Split('\')
        $lenght = $ta_split.Length
        $work_idx = $ta_split.IndexOf("work")
        if($currentDir.Contains("work")){
            $init = $work_idx
        }else{
            $init = $work_idx+2
        }
        $suite_dir = $ta_split[$work_idx-1]
        $tst = $ta_split[$init..($lenght)]
        $new_path = @($suite_dir)+$tst
        $currentDir =  "..$($new_path -join '\')"#"..\$suite_dir"
    }
	if (Test-Path .git) {
		Write-Host ("" + $currentDir + "\\") -NoNewLine `
		-ForegroundColor 13
		Write-BranchName
		Write-Host ("-->") -NoNewLine `
		-ForegroundColor 10
			return " "
    }
	else
	{
		Write-Host ("" + $currentDir+"\\") -NoNewLine `
		-ForegroundColor 13
		Write-BranchName
		Write-Host ("-->") -NoNewLine `
		-ForegroundColor 10
			return " "
	}	    
}
------------- lib/helpers ---------
#REQUIRES -Version 1.0
<#
.SYNOPSIS
	Helpers is a module created to facilte commands in powershell.
.DESCRIPTION
	There are many commands that you can use with the powershell profile.
.NOTES
    File Name      : GitComCom.psm1
    Author         : Solorzano, Juan Jose (uiv06924)
    Prerequisite   : PowerShell V1
#>
function del-pyc {
	$command = "del *.pyc /s"
	Start-Process -NoNewWindow -FilePath "cmd.exe" -ArgumentList "/C", $command
	Start-Sleep -Seconds 1
	Clear-Host
}
function frepo{
	set-location "C:\Users\uids7040\git"
}
function Edge($page) {
	try {
		$temp_dir = Get-Location
		Set-Location "C:\Program Files (x86)\Microsoft\Edge\Application\"
		Start-Process "msedge.exe" $page 
		Set-Location $temp_dir.Path
	}
	catch {
		Start-Process "msedge.exe"
		Set-Location $temp_dir.Path
	}
}

function TA($release){
	cd d:/p_ta3/
	$location=whereis -item $release -verbose $false
	cd $location
}

function Mlink ($target, $link){
	New-Item -Force -Path $link -ItemType SymbolicLink -Value $target
}
function b($n){

	$back_patern = '../'
	$multiplier = $n
	# Empty string to store the result.
	$total_back = ''

	if($null -eq $n){
		Set-Location $back_patern
	}
	else{
		# Repeating the string.
		for ($i = 1; $i -le $multiplier; $i++) {
		    $total_back += $back_patern
		}
		Set-Location $total_back
	}
}
function L($prj){
	$path = 'L:\didt6804\99_Users\Juan Jose Solorzano\{0}'
	if($prj){$path = $path -f $prj}
	else{$path = $path -f ''}
	return $path
}

function L-User($user, $l){
	$path = 'L:\didt6804\99_Users\{0}'
	if($user){$path = $path -f $user}
	else{$path = $path -f ''}
	if($l){ls $path}
	return $path
}
function ll {
	Get-ChildItem -Force | Sort-Object Extension
}
function note ($file){
	C:\LegacyApp\Notepad++\notepad++.exe $file
}
function re {
	powershell.exe
}
function py(){
	    if($null -eq $version -or '2' -eq $version){
	    	powershell "C:\LegacyApp\Python27_x64\py2.exe"
	    }
	    elseif('3' -eq $version){
	    	powershell "C:\LegacyApp\Python36\python3.exe"
	    }
	    elseif('39' -eq $version){
	    	powershell "C:\LegacyApp\Python39\py3.exe"
	    }
}

function eclipse ($file){
	if($null -eq $file){
		Start-Process "C:\LegacyApp\Eclipse_Contest\eclipse.exe"
	}
	else{
		Start-Process "C:\LegacyApp\Eclipse_Contest\eclipse.exe" $file
	}
}

function delete ($item){
    rm -Force -Recurse $item
}

function vi {
	[CmdletBinding()]
    param ([string]$file,[switch]$w)
	try{
		# Remove the ./ character 
		if($file.Contains('.\')){$file=$file.replace('.\','')}
	}catch{}
	$temp_path = Get-Location
	$root_file = $temp_path.Path +'\'+ $file
	Set-Location "C:\Program Files\Git\usr\bin\" 
	if($w){
		Start-Process "vim.exe"$root_file
	}else{
		.\vim.exe $root_file
	}
	Set-Location $temp_path.path
}

#####################################################
#get the parameters by console line
#####################################################
function whereis($item, $path, $verbose = $true){

	if($null -ne $item -And $null -eq $path -And $verbose -eq $true)
	{
		Write-Output "
		------------- Searching for < $item > -------------
		----- you can stop the search using 'ctr+c' -----
	searching...
	"
		$path = Get-ChildItem -Filter $item -Recurse 2> $null
	}
	elseif($null -ne $item -And $null -ne $path)
	{
		Write-Output "
		------------- Searching for < $item > --------------
		----- you can stop the search using 'ctr+c' ------
	searching...
	"
		$path = Get-ChildItem -Path $path -Filter $item -Recurse 2> $null
	}
	elseif($null -ne $item -And $null -eq $path -And $verbose -eq $false)
	{
		$path = Get-ChildItem -Filter $item -Recurse 2> $null
	}	
	else
	{
		Write-Host '
		'
		help $MyInvocation.MyCommand.Name
		write-host "Parameters:
		-item:: the file that you want to search
		-path:: the location where you want to search
		-verbose:: it shows the information
		"
	}
	if($verbose -eq $false){
		return $path.FullName
	}
	if($verbose -And $path)
	{
		$allpaths = $path.FullName
		Set-Clipboard $allpaths
		echo "Found at:"
		foreach($found in $allpaths)
		{
			echo "  $found"
		}
		echo "
		"
	}
	elseif ($path) 
	{
		Set-Clipboard $path.FullName
		echo 'All was copied on clipboard !!!
		'
	}
	else{echo " $item NOT FOUND !!!!!
	"}
}

function Insert-line($filePath, $stringToFind,$insertedString){
	# Specify the string you want to insert with a line break
	$insertedString = "`r`n$insertedString"  # Use `r`n for a line break
	$fileContent = Get-Content -Path $filePath
	# Find the line number that contains the specified string
	$lineNumber = 1
	foreach ($line in $fileContent) {
    	if ($line.contains($stringToFind)) {
        		break
    		}
    	$lineNumber++
	}

	# Check if the string was found
	if ($lineNumber -le $fileContent.Count) {
    # Insert the string with a line break after the line that contains the specified string
    	$fileContent[$lineNumber - 1] += $insertedString
		$status=$true
	} else {
    	Write-Host "String '$stringToFind' not found in the file."
		$status=$false
	}

	# Write the modified content back to the file
	$fileContent | Set-Content -Path $filePath
	return $status
}

function infpath($file){
    $temp_loc = get-location
	$root_file = $temp_loc.Path +'\'+ $file
    set-location 'C:\Program Files (x86)\Microsoft Office\Office15'
    start-process 'INFOPATH.EXE' $root_file
    set-location $temp_loc
}

function Set-PyEnv() {
	echo "*********************************************************************"
	echo "*********************************************************************"
	echo "		Wellcome to Python environment :) "
	echo "*********************************************************************"
	echo "[!] Searching for Python interperter..."
	echo " "
	Start-Sleep -Seconds 0.6
	$pythonPaths = Get-Command python*.exe -All
	$pythonPaths = $pythonPaths | Sort-Object
	if ($pythonPaths) {
		$cnt=0
	    Write-Host "Python is installed in the following locations:"
	    foreach ($path in $pythonPaths) {
	        Write-Host "  $cnt-"$path.Source
			$cnt++
	    }
		echo " "
		$interpreter = Read-Host "Select a python interperter"
		echo ""
		$tst = $pythonPaths[$interpreter].Source
		$lib = "Lib"
		$site_module = "\site.py"
		$ta_module = "\own_env.py"
		$py_exe = $pythonPaths[$interpreter].Name
		$py_rootpath = $pythonPaths[$interpreter].Source
		$py_path = $py_rootpath.replace($py_exe,'')
		$py_lib = $py_path + $lib 
		$py_lib_dir = $py_lib + $ta_module
		$site_path = $py_lib + $site_module
		$ta_file = ($PROFILE | Split-Path) + "\lib\own_env"
		cp $ta_file $py_lib_dir 
		echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		echo "[+] '$py_rootpath' has been updated."
		echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		echo ""
		#NOTE: The auto-import is not working as expected, the time execution increase significantly.
		#$status = Insert-line $site_path "import sys" "import own_env"
		#	if($status -eq $true){
		#	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		#	echo "[+] '$py_rootpath' has been updated."
		#	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		#	echo ""
		#}else{
		#	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		#	echo "[!] Error to insert the module import."
		#	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		#	echo ""
		#}

	} else {
	    Write-Host "Python is not installed or not in the system's PATH."
	}
}

--------------------lib/GitComCom -------------------------
#REQUIRES -Version 1.0
<#
.SYNOPSIS
	GitComCom is a module created to facilte the git commands in powershell.
.DESCRIPTION
	There are many commands that you can use with the powershell profile.
.NOTES
    File Name      : GitComCom.psm1
    Author         : Solorzano, Juan Jose (uiv06924)
    Prerequisite   : PowerShell V1
#>
function Write-BranchName () {
	$marks = "<{}>";
    try {
        $branch = git rev-parse --abbrev-ref HEAD
		if($null -eq $branch){$marks = ""}
        if ($branch -eq "HEAD") 
		{
            # we're probably in detached HEAD state, so print the SHA
            $branch = git rev-parse --short HEAD
            Write-Host $marks.Replace("{}",$branch) -ForegroundColor "red" -NoNewLine `
        }
        else 
		{
            # we're on an actual branch, so print it
			if(git status --porcelain | where {$_ -match '^\?\?' })
			{
				# Untracked files exist
				Write-Host $marks.Replace("{}","**$branch") -ForegroundColor "blue" -NoNewLine `
			}
			elseif(git status --porcelain | where {$_ -notmatch '^\?\?'})
			{
				# uncommitted changes
				Write-Host $marks.Replace("{}","++$branch") -ForegroundColor "blue" -NoNewLine `
			}
			else
			{
				# tree is clean
				Write-Host $marks.Replace("{}",$branch) -ForegroundColor "blue" -NoNewLine `
			}
        }
    } 
	catch 
	{
        # we'll end up here if we're in a newly initiated git repo
        Write-Host "" -ForegroundColor "yellow" -NoNewLine `
    }
}

function mbr{
	$br_name = git rev-parse --abbrev-ref HEAD
	return $br_name
}
function git-graph{
    echo "************************************************"
    echo "            GIT GRAPH VIEW "
    echo "************************************************"
	git log --all --decorate --oneline --graph
}
function Bra {
	$all_branches = git branch -a
	$idx = 0 
	$branches_name = @()
	foreach($br in $all_branches)
	{
		Write-Host $idx ':' $br -ForegroundColor "green" 
		$branches_name += $br
		$idx = $idx + 1
	}
	set-bra($branches_name)
}
function Set-Bra($branches) {
	$idx = read-host "select branch"
	if($idx)
	{
		if($branches[$idx].Contains("*"))
		{
			$branch = $branches[$idx].replace("* ","")
		}else
		{
			$branch = $branches[$idx].replace("remotes/origin/","")
		}
		Set-Clipboard $branch.Trim()
	}
}

function Repo($repo) {
	try {
		$repo=$repo.ToUpper()  
		$None=$false
	}
	catch {
		Write-Output "Which repo???"
		$None=$true
	}
	if(-not $None){
	    if($repo -eq "G80")
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.GM.G80.CVR.git'
	    }
	    elseif($repo -eq "G70") 
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.GM.G70.CVR.git'
	    }
	    elseif($repo -eq "FC1") 
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.FORD.FC1.REGR_TEST.git'
	    }
	    elseif($repo -eq "FB0")
	    {
	        return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.FORD.FB0.REGR_TEST.git'
	    }
	    elseif ($repo -eq "FB1"){
	        return 'https://gitlab-ec-na.aws1583.vitesco.io/ec/se/aet/tas/ford/fofb0_ta_suite.git'
	    }
		elseif($repo -eq "E42A"){
			return 'https://github.vitesco.io/EnDS-Test-Automation/VT.PRJ.GM.G55.FAST.git'
		}
		elseif($repo -eq "CONTEST"){
			return 'https://github.vitesco.io/EnDS-Test-Automation/VT.GEN.TOOL.CONTEST.git'
		}
		elseif($repo -eq "FC1_"){
			return 'https://github.vitesco.io/uiv06924/fo_fc1_ta_suite.git'
		}
	    else{echo "Repository <$repo> don't found !!!!!!!!!"}
	}
}

function Ignore{
	$ignore_list = @("work/ta/cnf/cnf_prj/devices_cnf/cnf_cal_dev.xml","work/ta/cnf/cnf_prj/devices_cnf/cnf_deb_dev.xml","work/ta/cnf/cnf_prj/devices_cnf/cnf_fiu_dev.xml","work/ta/cnf/cnf_prj/devices_cnf/cnf_hil_dev.xml","work/ta/cnf/cnf_prj/testenv_cnf/cnf_testpath.py","work/ta/cnf/cnf_prj/testenv_cnf/cnf_uut_info.xml")
	foreach($file in $ignore_list){
		Write-Output "remove $file"
		git checkout $file
	}
	del-pyc
}

function Git-Push{
	[CmdletBinding()]
    param (
        [string]$c,
		[string]$add,
        [switch]$noTa
    )
	if(-not $noTa){ignore}
    git pull --all
    Write-Host ">> git pull --all (done)"
	if($c){
    	if($add){
			Write-Host ">> Adding $add"
    	    git add $add
    	}
    	else{
    	    git add "."
            Write-Host ">> git add --all (done)"
    	}
    	git commit -am $c
    	Write-Output ">> commit added: '$c'"
        Write-Host "-------------------------------------------------------------"
    	git push origin (mbr)
	}
	else {
		Write-Output "push command needs to have a commit!!!"
	}
}

-----------------lib/own_env.py---------------------
# -*- coding: utf-8 -*-
"""
This module indicates the working path to be used with the VS Code program.
**********************************************************************************
@Autor: Juan Jose Solorzano (iuv06924)
**********************************************************************************
"""
import sys
import os

#----- constants ----#
SUITE_DIRS= '\\work\\ta\\'
WORK_DIR = os.getcwd()

def __get_root__():
    global WORK_DIR
    global SUITE_DIRS
    return WORK_DIR.split(SUITE_DIRS)[0]

def __get_name__():
    global WORK_DIR
    global SUITE_DIRS
    root_suite_path =  __get_root__()
    return root_suite_path.split('\\')[-1:][0] #get the last folder name in the work directory.

def __change_line__(file_path,str_to_find,str_to_change):
    f = open(file_path,'r') # Open the file in read mode.
    dataList = []
    #------- Find the string indicating --------#
    for line in f.readlines():
        if str_to_find in line:
            dataList.append(str_to_change)
        else: 
            dataList.append(line)
    f.close()
    fi = open(file_path,'w')
    #----- Re-write the file -----#
    for line in dataList:
        fi.write(line)
    fi.close()

def get_ta_suite_name(work_path = None):
    global WORK_DIR
    global SUITE_DIRS
    name = None
    if work_path:
        WORK_DIR = work_path

    if SUITE_DIRS in WORK_DIR:
        name = __get_name__()
    elif WORK_DIR.__contains__('work'):
        work_subfolder = WORK_DIR.split('\\')[-1:][0]
        if work_subfolder == 'ta':
            WORK_DIR = WORK_DIR + '\\'
        else:
            WORK_DIR = WORK_DIR.replace('\\work','')
            WORK_DIR = WORK_DIR + SUITE_DIRS
        name = __get_name__()
    elif 'work' in os.listdir(WORK_DIR):
        name = WORK_DIR.split('\\')[-1:][0] #get the last folder name in the work directory.
        
    return name

def get_modules_path(work_dir):
    suite_pypath = []
    for path, _, _ in os.walk(work_dir):
        suite_pypath.append(path)
    return suite_pypath

def set_modules_path(lst_modules):
    """
    @public function: sets all modules found in the .vs_workspace file.
    @final_modules: contains the path to all modules in the .vs_workspace file.   
    """
    for module in lst_modules:
        sys.path.append(module)

def set_usr_conf():
    work_folder = __get_name__()
    sys.ps1 = "[{}](py{})-> ".format(work_folder,str(sys.version.split(' (')[0])[:1])

def main(root=None):
    name = get_ta_suite_name(root)
    if name:
        root = __get_root__()
        print("User environment: <{}>".format(name))
    if root != None:   
        modules_path = get_modules_path(root)
        set_modules_path(modules_path)
        if not name:
            print(65*'*')
            print('[+] New python environment')
            print(65*'*')
    set_usr_conf()

def cls():
    """
    @Clear the console
    """
    os.system('cls')

def get_code(script=''):
    """
    Summary: Execute a script within a python session.
    Args:
        script (str, optional): The name of the script to execute. Defaults to ''.
    Raises:
        NameError: If 
    """
    if script != '':
        with open(script, 'r') as file:
            code = file.read()
        return code
    else:
        raise NameError('[!] Script name was not given.')

def ls(dir='.'):
    curr_dir=os.listdir(dir)
    for i in curr_dir:
        print(i)

def cd(dir='.'):
    os.chdir(dir)
#_start_()

#*****************************************************************************************#
#                            !  DEPRECATED  !
#*****************************************************************************************#
# print(bcolors.WARNING + "Warning: No active frommets remain. Continue?" + bcolors.ENDC)
#def init_paths(suite_path=None):
#    """
#    @public fucntion: initilizes the base path for all modules used in the TA suite.
#    @suite_path: points to the base path of the user's suite.
#    """
#    suite_path = os.path.abspath(suite_path)
#    suite_path = suite_path.upper()
#    try:
#        if suite_path.__contains__(VT_PROJECT):
#            suite_rel_path = suite_path.split(VT_PROJECT)
#            suite_name = str(VT_PROJECT+suite_rel_path[1]).split("\\")[0]
#            #----- Search the file where are located all modules path ----# 
#            os.chdir(suite_path) # set the path to the user suite, which will be indicated to the Python interpreter. 
#            vs_workspace = open("{}.code-workspace".format(suite_name), "r")
#            dataParser(vs_workspace)
#    except:
#        runOnEclipse = str(suite_path).__contains__('work\\ta\\')
#        if(runOnEclipse):
#            pass
#        else:
#            pass
#
#def dataParser(vs_workspace):
#    """
#    @public function: converts all acquired data into the vs_workspace file.
#    @vs_workspace: contains the informations of the .workspace file.
#    """
#    moudule_list = []
#    for path in vs_workspace:
#        moudule_list.append(str(path))
#    final_modules = []
#    for module in moudule_list:
#        str_module = str(module)
#        if str_module.__contains__("D:/"):
#            module_name = str(str_module.replace(",", "")).replace('"', "")
#            final_modules.append(module_name.strip())
#    set_modules_path(final_modules)
#    #final_modules.extend("D:/p_ta3/Remote/MarkerFollowUp/Exp") #adding manually paths imports


#>
